using Charon.Security;
using Charon.Types;

namespace Charon.Core.Tests.Security
{
    [Priority(2147483646)]
    public sealed class SecureEncryptTestPublicKeyRetriever : IPublicKeyRetriever
    {
        public byte[] GetKey(string stage)
        {
            return stage switch
            {
                "TESTS" => [6, 2, 0, 0, 0, 164, 0, 0, 82, 83, 65, 49, 0, 16, 0, 0, 1, 0, 1, 0, 147, 177, 206, 214, 193, 106, 74, 61, 148, 116, 2, 164, 164, 86, 56, 45, 165, 223, 58, 150, 78, 246, 252, 123, 48, 130, 123, 67, 23, 91, 60, 2, 206, 32, 226, 175, 62, 59, 42, 97, 207, 194, 9, 152, 211, 180, 80, 26, 107, 8, 165, 51, 146, 253, 72, 181, 208, 107, 234, 172, 30, 126, 218, 24, 41, 56, 90, 41, 26, 24, 98, 132, 4, 202, 118, 87, 235, 169, 93, 65, 28, 181, 229, 231, 199, 135, 91, 242, 77, 113, 102, 169, 255, 104, 211, 201, 8, 43, 125, 139, 250, 165, 70, 234, 176, 117, 101, 169, 113, 144, 199, 122, 82, 51, 226, 184, 9, 199, 155, 70, 13, 156, 125, 9, 180, 154, 72, 185, 41, 118, 215, 168, 255, 43, 22, 68, 220, 192, 151, 233, 153, 116, 160, 22, 121, 127, 122, 61, 188, 54, 38, 83, 82, 94, 111, 151, 142, 35, 219, 192, 127, 103, 247, 85, 32, 18, 218, 94, 14, 159, 99, 60, 188, 191, 68, 3, 126, 33, 67, 27, 176, 75, 38, 9, 248, 239, 232, 25, 52, 239, 221, 202, 130, 253, 28, 231, 40, 171, 164, 2, 234, 47, 145, 14, 183, 233, 133, 214, 97, 183, 171, 210, 15, 62, 167, 247, 189, 166, 180, 209, 41, 148, 98, 206, 11, 177, 44, 85, 216, 209, 200, 57, 112, 153, 11, 93, 127, 115, 229, 173, 184, 230, 73, 254, 141, 199, 162, 100, 245, 27, 73, 114, 86, 41, 81, 73, 11, 223, 3, 144, 1, 70, 240, 56, 60, 42, 130, 160, 239, 73, 203, 43, 21, 209, 82, 80, 181, 110, 48, 126, 5, 232, 228, 56, 190, 243, 124, 144, 136, 248, 250, 61, 165, 168, 41, 2, 228, 53, 225, 8, 191, 85, 169, 133, 35, 12, 229, 42, 21, 178, 18, 160, 127, 214, 61, 189, 226, 224, 204, 79, 160, 231, 230, 196, 248, 247, 105, 13, 255, 199, 198, 151, 139, 136, 234, 144, 208, 17, 188, 131, 210, 147, 164, 58, 157, 11, 102, 233, 134, 226, 219, 97, 133, 249, 158, 124, 78, 27, 34, 38, 122, 146, 82, 19, 48, 78, 206, 217, 205, 232, 181, 248, 111, 36, 122, 82, 144, 67, 174, 120, 6, 59, 164, 67, 66, 179, 42, 93, 52, 216, 226, 220, 115, 183, 169, 56, 55, 72, 125, 41, 214, 98, 162, 34, 100, 137, 23, 221, 57, 99, 127, 117, 79, 182, 10, 241, 58, 213, 168, 238, 254, 156, 63, 228, 78, 167, 12, 183, 26, 210, 56, 38, 38, 85, 95, 156, 190, 35, 222, 156, 204, 2, 41, 34, 231, 175, 8, 173, 52, 119, 89, 48, 20, 249, 73, 204, 242, 52, 132, 173, 34, 134, 214, 251, 135, 146, 75, 137, 199, 152, 122, 130, 249, 199, 127, 189, 62, 128, 173, 51, 127, 202, 166, 243, 210, 84, 57, 0, 194, 175, 226, 76, 203, 190, 98, 114, 17, 116, 254, 65, 106, 29, 208, 54, 132, 178, 83, 238, 193, 245, 254, 154],
                _ => throw new NotImplementedException()
            };
        }
    }
}
