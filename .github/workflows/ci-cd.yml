name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # Restore + Build + Test Backend
      - name: Restore Backend
        run: dotnet restore ./src/Charon.Api/Charon.Api.csproj
      - name: Build Backend
        run: dotnet build ./src/Charon.Api/Charon.Api.csproj --configuration Release --no-restore
      # - name: Test Backend
      #   run: dotnet test ./src/tests --no-build --verbosity normal

      # Setup Node.js
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install + Build Frontend
      - name: Install Frontend
        run: npm ci --prefix ./frontend
      - name: Build Frontend
        run: npm run build --prefix ./frontend

#  docker-build-push:
#    runs-on: ubuntu-latest
#    needs: build-test
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4

#      # Login zu Docker Hub oder GitHub Container Registry
#      - name: Log in to Docker registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      # Build & Push Backend Image
#      - name: Build & Push Backend
#        uses: docker/build-push-action@v6
#        with:
#          context: ./backend
#          file: ./docker/backend.Dockerfile
#          push: true
#          tags: ghcr.io/${{ github.repository }}/backend:latest

#      # Build & Push Frontend Image
#      - name: Build & Push Frontend
#        uses: docker/build-push-action@v6
#        with:
#          context: ./frontend
#          file: ./docker/frontend.Dockerfile
#          push: true
#          tags: ghcr.io/${{ github.repository }}/frontend:latest

#  deploy:
#    runs-on: ubuntu-latest
#    needs: docker-build-push
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4

#      # Example Azure Deployment
#      # - name: Azure WebApp Deploy
#      #   uses: azure/webapps-deploy@v3
#      #   with:
#      #     app-name: "myapp-web"               # Dein Azure WebApp Name
#      #     publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE }}
#      #     images: |
#      #       ghcr.io/${{ github.repository }}/backend:latest
#      #       ghcr.io/${{ github.repository }}/frontend:latest

#      # Example AWS ECS Deployment (alternativ)
#      # - name: Deploy to Amazon ECS
#      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#      #   with:
#      #     task-definition: ecs-task-def.json
#      #     service: myapp-service
#      #     cluster: myapp-cluster
#      #     wait-for-service-stability: true
